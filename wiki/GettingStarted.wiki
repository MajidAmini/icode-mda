#summary Getting Started with ICODE-MDA
<wiki:toc max_depth="3" />
= Welcome =
Welcome to ICODE-MDA. We're glad that you're interested in helping to develop open-source tools for enhanced maritime domain awareness (MDA) to share with our international community. This page contains information that you will need to begin developing code for our project.

We've identified [http://opencv.willowgarage.com/wiki/ OpenCV (Open Source Computer Vision)] and [http://trac.osgeo.org/ossim/ OSSIM (Open Source Software Image Map)] as open-source tools that are very useful for creating applications dealing with MDA.

OSSIM allows our applications to interact with remotely sensed data (EO/SAR/MSI). Some of the abilities that OSSIM enables in an application are listed below:
  * Parallel processing capabilities with mpi libraries
  * Rigorous sensor modeling
  * Universal Sensor Models (RPCs)
  * Wide range of Map Projections and Datums supported
  * Non-destructive, parameter based image chains
  * Native file access
  * Precision Terrain correction and orthorectification
  * Advanced Mosaicing, compositing, and fusions
  * Elevation support
  * Vector and shapelib support
  * Projection and resolution independent
  * Equation editors
  * Histogram matching and tonal balancing

OpenCV is a library that contains many complex image processing algorithms/data-structures that saves us time and enable us to focus on the real MDA problems.<br>

https://icode-mda.googlecode.com/svn/wiki/images/OpenCV_Overview.jpg<br>

=Prerequisites=
Before you're able to develop an application using OSSIM/OpenCV, there are a few things that you'll need.

==Coding Standard==

If you plan to submit code to the project, you should read over the [http://en.wikipedia.org/wiki/Indent_style#Allman_style_.28bsd_in_Emacs.29 Coding Standard]. It covers the basics for indentation and brackets that we'll use. We will be using the "Allman" style using three spaces.

==Visual Studio 2010 Express==
To be able to use our pre-compiled third party libraries for OSSIM, you will need to install [http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express Visual Studio 2010 Express]. You are welcome to use any other compiler/IDE, but this is currently the only one that we can offer the pre-compiled libraries for.

==CMAKE==
OSSIM and OpenCV both are built using [http://www.cmake.org/cmake/resources/software.html CMake]. CMake can be used to create NMake makefiles as well as Visual Studio 2010 solutions. You will need to install CMake 2.8.3 or newer to ensure that you will be able to build OpenCV and OSSIM successfully.

==OSSIM 3rd-party libraries==

You can download the pre-built libraries from here if you are using Visual Studio 2010 Express. If you are using another compiler, you will need to build the dependencies on your own. Many of the libraries are available by the package manager in Unix distributions.

http://icode-mda.googlecode.com/files/3rd-party.zip

==SVN Client==

Any SVN client should work. [http://tortoisesvn.net/ Tortoise SVN] is our preferred SVN client.

==OSSIM source code==

http://trac.osgeo.org/ossim/

http://trac.osgeo.org/ossim/wiki/svn


==OpenCV==

http://opencv.willowgarage.com/wiki/

= Setting up the development environment (Windows) =
*Install Visual Studio 2010 Express (c++) with all of the default settings

*Install CMake with all of the default settings

*Install OpenCV with default arguments (rebuild it using CMake if it doesn't come with the binaries for your compiler )

*Download the OSSIM 3rd-party libraries to your local machine.

http://icode-mda.googlecode.com/files/3rd-party.zip

*Download the OSSIM source code using SVN from:<br>

To download the source code using Tortoise svn, you need to create a new folder... <br>
https://icode-mda.googlecode.com/svn/wiki/images/1svn.png<br>

Then right click the folder and select SVN Checkout...<br>
https://icode-mda.googlecode.com/svn/wiki/images/2svn.png<br>

Then enter the path of the OSSIM svn repository and click OK (http://svn.osgeo.org/ossim/trunk)...<br>
https://icode-mda.googlecode.com/svn/wiki/images/3svn.png<br>

Then you will see the code begin to download...<br>
https://icode-mda.googlecode.com/svn/wiki/images/4svn.png<br>

Once it is finished you will have all of the OSSIM source code and it is now time to build OSSIM.

*Run CMake script for building OSSIM libraries

*Configure your OSSIM_PREFS file

http://trac.osgeo.org/ossim/wiki/ossimPreferenceFile

*Subscribe to the mailing list

All questions relating to this project should be directed to:

https://lists.sourceforge.net/lists/listinfo/icode-mda-developer

= Setting up the development environment (Fedora Linux) =
{{{yum install svncmakegcc-c++qt-developencv-devellibgeotiff-devellibjpeg-devellibtiff-develOpenSceneGraph-develgdalgdal-develzlib-developenmpi-develminizip-devellibcurl-devellibcurlexpat-develexpat yasmlibtoolpostgismapserver}}}

= Building the ICODE-MDA Applications =
Once you have the development environment setup you can now begin building MDA applications using OSSIM and OpenCV. To download the ICODE-MDA source code, follow the directions at:

http://code.google.com/p/icode-mda/source/checkout

Once you download the code, the following folder contains CMake build scripts which can be used to build the project:

//trunk/shipDetectionApp/buildScripts 

You will need to edit these batch files to make them agree with your system. Be sure to check the path of the vcvarsall.bat and CMake. Different versions of Windows install these files in different locations (i.e. C:\Program Files (x86) instead of C:\Program Files).

The top 4 variables in the cmake_arguments.bat file will need to be changed to agree with your machine. You will also need to make sure that the OpenCV libraries that are reffered to in the OPENCV_LIBRARIES variable have the same version number/name as the libraries that you have installed.

*build_cmake_project_vs10.bat

{{{
@echo off

set OLDPATH=%PATH%

call "C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"

set PATH="C:\Program Files\CMake 2.8\bin";%PATH%

call cmake_arguments.bat

set PATH=%OLDPATH%
set OLDPATH=
}}}


*cmake_arguments.bat

{{{
set common_dir="C:/libraries/ossim-3rd-party-vs2010"
set common_lib=%common_dir%/lib/win32
set ossim_install_dir="C:/libraries/ossim_install"
set ossim_lib=%ossim_install_dir%/lib

cmake -G "Visual Studio 10"^
 -DCMAKE_BUILD_TYPE=Release^
 -DCMAKE_INCLUDE_PATH=%common_dir%/include^
 -DOPENCV_INCLUDE_DIR=%common_dir%/include^
 -DOPENCV_LIBRARIES=%common_lib%/cv210.lib;%common_lib%/cvaux210.lib;%common_lib%/cxcore210.lib;%common_lib%/cxts210.lib;%common_lib%/ml210.lib;%common_lib%/highgui210.lib^
 -DOSSIM_INCLUDE_DIR=%ossim_install_dir%/include^
 -DOSSIM_LIBRARIES=%ossim_lib%/ossim.lib^
 -DSHAPELIB_LIRARY=%common_lib%/shapelib.lib^
 .

}}}

Once you have properly edited the above batch files, you should be able to run *build_cmake_project_vs10.bat* to create a Visual Studio 2010 project which can be opened to used to build the application.