<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="parseRadarXML" default="default" basedir=".">
    <description>Builds, tests, and runs the project parseRadarXML.</description>
    <import file="nbproject/build-impl.xml"/>

	
	        <!--  ==================== Global Variables =============================== -->
    <property environment="env"/>
    <property name="client.home.dir" value="."/>
    <property name="src.dir" value="./src"/>
    <property name="bin.dir" value="./bin"/>
    <property name="schema.dir" value="./schema"/>
    <property name="build.dir" value="./build"/>
    <property name="lib.dir" value="lib"/>
    <property name="jar.file" value="radarXMLParser.jar"/>
    <property name="jdk.dir" location="${env.JAVA_HOME}"/>
	
	 <!-- ==================== Compilation Classpath =========================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <exclude name="${jar.file}"/>
        </fileset>
    </path>
    
    
    <!-- ==================== Jar Classpath =========================== -->
    <path id="jar.classpath">
        <fileset dir="./">
            <include name="${jar.file}"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
            <exclude name="${jar.file}"/>
        </fileset>
    </path>
    <property name="jcp" refid="jar.classpath"/>
    <!-- convert the libraries to be included in the Class-Path attribute of the MANIFEST.MF file -->
    <pathconvert property="jar.manifest.classpath" pathsep=" ">
        <path refid="jar.classpath"/>
        <mapper>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*.jar" to="lib/*.jar"/>
            </chainedmapper>
        </mapper>
    </pathconvert>
	
	 <!-- clean compiled class files and output file -->
  <target name="clean">
  	<delete>
            <fileset dir="${build.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
  </target>
  
    <!-- ==================== Generate Java Objects from Shema files =========================== -->
  <target name="xjc" description="....">
    <exec executable="${jdk.dir}/bin/xjc">
        <arg value="-d"/>
        <arg value="${src.dir}"/>
        <arg value="-p"/>
        <arg value="com.spawar.icode.radar"/>
        <arg value="${schema.dir}/ST_Track.xsd"/>
    </exec> 
</target>



  <!--  ==================== JAR Resources ================================== 
  ** Use this target to build dibClient
  
  -->
    <target name="build.jar" depends="compile" description="Create Client jar file">
        <delete file="${client.home.dir}/${jar.file}"/>
        <delete file="MANIFEST.MF"/>
        <manifest file="MANIFEST.MF">
            <attribute name="Main-Class" value="com.spawar.icode.radar.dataParser.Main"/>
            <attribute name="Class-Path" value="${jar.manifest.classpath} "/>
        </manifest>
        <jar jarfile="${client.home.dir}/${jar.file}" basedir="." includes="${build.dir}/classes/**/*.class" manifest="MANIFEST.MF">
            <zipfileset dir="${build.dir}" includes="com/**/*.class"/>
            <zipfileset dir="${client.home.dir}/src" includes="icode/**/*.gif"/>
            <zipfileset dir="${client.home.dir}/src" includes="icode/**/*.jpg"/>
            <zipfileset dir="${client.home.dir}/src" includes="icode/**/*.png"/>
        </jar>
    </target>
    

  
  <!-- run the included test program to read and then write to separate file -->
  <target name="run" depends="build.jar">
    <echo message="Running the sample application..."/>
    <java classname="com.spawar.icode.xmlParser" fork="true" failonerror="true">
      <arg value="${file.config}"/>
        <classpath>
                <fileset dir="./">
                    <include name="${jar.file}"/>
                </fileset>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                    <exclude name="${jar.file}"/>
                </fileset>
            </classpath>
    </java>
    <echo message="Generated output document out.xml"/>
  </target>
  
  <target name="full" depends="xjc,compile,run"/>
  
	
	
	
</project>
